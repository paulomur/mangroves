[["index.html", "Mapping mangroves using remote sensing 1 Overview", " Mapping mangroves using remote sensing Paulo J. Murillo-Sandoval April 13, 2021 1 Overview Mangroves play a critical role in our social, economic, and ecological resources, but there are gaps in our understanding of carbon accounting and management. This is why we use field and remote observations to monitor its status. This tutorial uses different satellite data to map the current extent of mangroves using Sentinel 1 &amp; 2 and historically using Landsat legacy. This project is funded by SilvaCarbon and the study region is Colombia. More info about other mangroves related projects https://mangrovescience.org/ (PI. Lola Fatoyinbo) Figure 1.1: Mangroves Source: Pixabay "],["mapping-mangroves-using-sentinel12.html", "2 Mapping mangroves using Sentinel1&amp;2 2.1 Preprocessing/Exporting Sentinel-1 and Sentinel-2 2.2 Organizing a basemap (get training data) 2.3 Indices and an object-based classifier", " 2 Mapping mangroves using Sentinel1&amp;2 We use Colombia as study region for this analysis. However, our analysis can be applied everywhere. The steps to map mangroves and other common land cover classes are: Pre-processing/Exporting Sentinel-1 and Sentinel-2 Organizing a basemap (get training data!!!) Applying an object-based classifier All previous steps can be easily modified for specific conditions. First thing is adding the repository to your Earth Engine account: https://code.earthengine.google.com/?accept_repo=users/murillop/mapping_mangroves # and call the main library: var man = require(&#39;users/murillop/mapping_mangroves:mangroves&#39;); In that the repository you can find the main library plus the examples to run the analysis. 2.1 Preprocessing/Exporting Sentinel-1 and Sentinel-2 Preprocessing data from S1 requires the effective removal of speckle noise. We use Perona-Malik filter to remove speckle for each image. For Sentinel-2 we remove clouds and shadows. All functions allows to obtain better spectral information for the period 2019-2020. After improving the data, a image composite using the median. We also calcuate the standard deviation and percentiles 20th and 80th. Finally we save the resulting composite as an asset. The only parameter needed are: # Import library var man = require(&#39;users/murillop/mapping_mangroves:mangroves&#39;); var region = ee.Geometry.Polygon( [[[-78.63099738574668, 2.746827033203151], [-78.63099738574668, 2.2295862108717603], [-77.70677253223106, 2.2295862108717603], [-77.70677253223106, 2.746827033203151]]], null, false); var AOI = region; # Parameters var params = { START_DATE: &#39;2019-01-01&#39;, END_DATE: &#39;2021-01-01&#39;, CLOUD_FILTER : 60, ///CLOUDY_PIXEL_PERCENTAGE. Select less than 60% CLD_PRB_THRESH : 20, ///PROBABILITY greater than 20% NIR_DRK_THRESH : 0.15, ///For shadows CLD_PRJ_DIST : 1, ///Project shadows from clouds using distance =1 BUFFER : 50 ///Buffer around clouds }; After modify your parameters you can apply the functions needed for pre-processing Example: Get all S2 images based on parameters. var s2_sr_cld_col_eval = man.get_s2_sr_cld_col(AOI, params); print (s2_sr_cld_col_eval.size(),&#39;number of S2 images&#39;); See the rest of the script on the repository 1.Export_S1_S2_composite. 2.2 Organizing a basemap (get training data) Getting training data for a classification process is a exhausting task. Mostly visual and manually collected, training data is key for a success classification process.Here we use previous maps created by Colombia Government from which we select specific land cover classes. The basemap follows the Corine Land Cover (CLC) methodology which is the official methodology employs by official Colombian agencies. See official CLC documentation can be found here For this exercise, five classes were used: 1. Mangroves 2. Water 3. Dense Forest &gt;80% tree canopy cover 4. Non-forest &lt;20% tree canopy cover 5. Other vegetation (shurb, herbaceous, wet forest) This function add specific land cover types. var man = require(&#39;users/murillop/NASA_mangroves:mangroves&#39;); # Get Corine Land cover classes var corine = man.getCORINE() The CLC is from 2012. We update this map using Hansen and JRC datasets for 2019. This process helps to obtain classes more pure pixels and discard outliers. 2.3 Indices and an object-based classifier We calculate a set of different relevant spectral metrics from the exported asset. Relevant vegetation indices and GLCM textural metrics for mapping mangroves were calculate. To add them into the exported asset. # Read S1+S2 var s1_s2 = ee.Image(&quot;projects/mangrovescience/SilviaCarbon_COL/Sentinel_Predictors/s1_s2_2019-01-01_2021-01-01&quot;) # Read S2 only and calculate different predictors (Indices+GLCM indicators) var s2 =s1_s2.select(&#39;B.*&#39;); s2 =man.doIndices2(ee.ImageCollection(s2)); Now we have S2 data, then we add S1 bands: var s1 =ee.Image(&quot;projects/mangrovescience/SilviaCarbon_COL/Sentinel_Predictors/s1_s2_2019-01-01_2021-01-01&quot;) .select(&#39;VV&#39;,&#39;VH&#39;); var s1s2_new = s2.addBands(s1); var bands = s1s2_new.bandNames(); print(s1s2_new, &#39;s1s2_new&#39;); Once we have our final set of predictors we can apply a object-based classifier. Object-based classifiers are more robust than conventional pixel-based analysis. We used the SNIC algorithm to detect clusters using the Mangroves Vegetation Index (MVI). See article here User can modify MVI for any other index or metric. #Define SNIC var snic_sen1_2 = man.snic_mangroves_sentinel(s1s2_new.select(bands), &#39;MVI&#39;); // You can pick other index var predictionBands=snic_sen1_2.bandNames().remove(&#39;clusters&#39;); snic_sen1_2 = snic_sen1_2.select(predictionBands); "],["mapping-mangroves-using-landsat-archive.html", "3 Mapping mangroves using Landsat archive", " 3 Mapping mangroves using Landsat archive For mapping historical mangroves change using Landsat our approach is a bit different than for S1+S2. The Colombian Pacific is the most rainy region worldwide, consequently obtain cloud-free optical data is very difficult for this region. To improve spectral data and filling gaps for missing year I employ LandTrendr. Given the lack of images we create 3-year composites from 1985-2020 that were linearly improved using temporal segmentation from Landtrendr. Figure 3.1: LandTrendr segmentation example "]]
